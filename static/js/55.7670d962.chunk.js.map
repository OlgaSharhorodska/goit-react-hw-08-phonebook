{"version":3,"file":"static/js/55.7670d962.chunk.js","mappings":"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","sources":["components/FormError/FormError.styled.js","components/FormError/FormError.jsx","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ErrMessage/ErrMessage.styled.js","components/ErrMessage/ErrMessage.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Loader/loader.styled.js","components/Loader/loader.jsx","components/TitleContacts/TitleContacts.styled.js","components/TitleContacts/TitleContacts.jsx","components/TitlePhonebook/TitlePhonebook.styled.js","components/TitlePhonebook/TitlePhonebook.jsx","Page/Phonebook.jsx","components/ContactForm/ContactForm.styled.js","components/Section/Section.styled.js"],"sourcesContent":["const { default: styled } = require('styled-components');\n\nexport const ErrorText = styled.span`\n  color: red;\n`;\n","import { ErrorMessage } from 'formik';\nimport { ErrorText } from './FormError.styled';\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nexport default FormError;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContactItems = state => state.contacts.contacts.items;\nexport const selectContactIsLoading = state =>\n  state.contacts.contacts.isLoading;\nexport const selectContactError = state => state.contacts.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContactItems, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { FieldEl, FormEl } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { addContacts } from 'redux/contactSlice';\nimport { Formik } from 'formik';\nimport { object, string, number } from 'yup';\nimport FormError from 'components/FormError/FormError';\nimport { selectContactItems } from 'redux/selectors';\nimport { addContact } from 'redux/operationsContacts';\nimport { Button } from '@mui/material';\n\nconst schema = object({\n  name: string()\n    .min(3, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required!'),\n  number: number('must be a number').min(2, 'Too Short!').required('Required!'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactItems);\n\n  const handleSubmit = (values, { resetForm }) => {\n    resetForm();\n    if (\n      contacts.find(\n        ({ name: contactName }) =>\n          contactName.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      alert(`${values.name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(values));\n\n    console.log(values);\n  };\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <FormEl autoComplete=\"off\">\n        <label htmlFor=\"name\">Name</label>\n        <div>\n          <FieldEl\n            // as={TextField}\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            placeholder=\"Enter name ...\"\n            label=\"Name\"\n            variant=\"outlined\"\n          />\n\n          <FormError name=\"name\" />\n        </div>\n\n        <label htmlFor=\"number\">Number</label>\n        <div>\n          <FieldEl\n            type=\"tel\"\n            name=\"number\"\n            id=\"number\"\n            placeholder=\"tel: xxx-xx-xx\"\n          />\n          <FormError name=\"number\" />\n        </div>\n        {/* <button type=\"submit\">Add contact</button> */}\n        <Button variant=\"contained\" type=\"submit\">\n          Add contact\n        </Button>\n      </FormEl>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 30px;\n  gap: 10px;\n\n  li {\n    font-weight: 500;\n\n    button {\n      width: max-content;\n      padding: 5px 10px;\n      border-radius: 5px;\n      margin-left: 15px;\n      margin-bottom: 5px;\n      border: none;\n      box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2), 1px 1px 3px rgba(0, 0, 0, 0.2);\n    }\n  }\n`;\n","import { Button } from '@mui/material';\nimport { List } from './ContactList.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operationsContacts';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const onDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {[\n        visibleContacts.map(({ id, name, number }) => {\n          return (\n            <li key={id}>\n              {name}: {number}\n              {/* <button onClick={() => onDeleteContact(id)}>Delete</button> */}\n              <Button variant=\"contained\" onClick={() => onDeleteContact(id)}>\n                Delete\n              </Button>\n            </li>\n          );\n        }),\n      ]}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ErrorText = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  color: red;\n`;\n","import React from 'react';\nimport { ErrorText } from './ErrMessage.styled';\nimport { useSelector } from 'react-redux';\nimport { selectContactError } from 'redux/selectors';\n\nconst ErrMessage = () => {\n  const error = useSelector(selectContactError);\n  console.log(error);\n  return <ErrorText> {error.message} </ErrorText>;\n};\n\nexport default ErrMessage;\n","// import { TextField } from '@mui/material';\nimport styled from 'styled-components';\n\nexport const FilterWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 15px;\n  width: 250px;\n  height: 26px;\n  margin-bottom: 50px;\n  outline: none;\n\n  label {\n    font-weight: 500;\n    margin-bottom: 5px;\n  }\n  input {\n    font-size: 15px;\n    width: 250px;\n    height: 26px;\n    outline: none;\n    border-radius: 5px;\n    background-color: #fff;\n  }\n`;\n","import React, { useState } from 'react';\nimport { FilterWrap } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filterSlice';\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const [filter, setFilter] = useState('');\n\n  const changeInput = input => {\n    setFilter(input.value);\n\n    dispatch(filterContacts(input.value));\n  };\n  return (\n    <FilterWrap>\n      <TextField\n        autoComplete=\"off\"\n        label=\"Find contacts by name\"\n        variant=\"outlined\"\n        type=\"text\"\n        id=\"filter\"\n        name=\"filter\"\n        value={filter}\n        onChange={e => changeInput(e.target)}\n      />\n    </FilterWrap>\n  );\n};\n","import styled from 'styled-components';\n\nexport const LoaderWrap = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n`;\n\nexport const LoadMessage = styled.div`\n  margin-bottom: 10px;\n  font-size: large;\n  font-weight: 500;\n`;\n","import { Hourglass } from 'react-loader-spinner';\nimport { LoadMessage, LoaderWrap } from './loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrap>\n      <LoadMessage>Loading...</LoadMessage>\n      <Hourglass\n        visible={true}\n        height=\"50\"\n        width=\"50\"\n        ariaLabel=\"hourglass-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        colors={['#306cce', '#72a1ed']}\n      />\n    </LoaderWrap>\n  );\n};\n","import styled from 'styled-components';\n\nexport const TitleCont = styled.h2`\n  font-size: 32px;\n  font-weight: 500;\n  margin-bottom: 30px;\n`;\n","import { TitleCont } from './TitleContacts.styled';\n\nexport const TitleContacts = ({ title }) => {\n  return <TitleCont>{title}</TitleCont>;\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  font-size: 40px;\n  font-weight: 600;\n  margin-bottom: 30px;\n`;\n","import { Title } from './TitlePhonebook.styled';\n\nexport const TitlePhonebook = ({ title }) => {\n  return <Title>{title}</Title>;\n};\n","import { Container } from '@mui/material';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport ErrMessage from 'components/ErrMessage/ErrMessage';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/loader';\nimport { Section } from 'components/Section/Section.styled';\nimport { TitleContacts } from 'components/TitleContacts/TitleContacts';\nimport { TitlePhonebook } from 'components/TitlePhonebook/TitlePhonebook';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operationsContacts';\nimport { selectContactError, selectContactIsLoading } from 'redux/selectors';\n\nconst Phonebook = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectContactIsLoading);\n  const error = useSelector(selectContactError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <main>\n        <Container>\n          <Section>\n            <TitlePhonebook title=\"Phonebook\" />\n            <ContactForm />\n          </Section>\n          <Section>\n            <TitleContacts title=\"Contacts\" />\n            <Filter />\n            <ContactList />\n            {isLoading && <Loader />}\n            {error && <ErrMessage />}\n          </Section>\n        </Container>\n      </main>\n    </>\n  );\n};\n\nexport default Phonebook;\n","import styled from 'styled-components';\nimport { Field, Form } from 'formik';\n\nexport const FormEl = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  border: 1px solid black;\n  width: 500px;\n  padding: 20px 15px;\n  border-radius: 8px;\n  background-color: #fff;\n  gap: 10px;\n\n  label {\n    font-weight: 500;\n    margin-bottom: 5px;\n  }\n  /* input{\n    font-size: 15px;\n    width: 250px;\n    height: 26px;\n    margin-bottom: 30px;\n    outline: none;   \n    margin-right: 10px; */\n\n  /*    \n    &:focus{\n        outline: 1px solid rgba(0, 255, 255);\n    } */\n\n  /* }   */\n\n  button {\n    width: max-content;\n    border-radius: 5px;\n    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2), 1px 1px 3px rgba(0, 0, 0, 0.2);\n  }\n`;\nexport const FieldEl = styled(Field)`\n  outline: none;\n  height: 60px;\n  margin-right: 10px;\n  width: 250px;\n`;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 20px 0;\n  padding-left: 50px;\n`;\n"],"names":["ErrorText","require","default","span","_templateObject","_taggedTemplateLiteral","_ref","name","_jsx","ErrorMessage","render","message","children","selectContactItems","state","contacts","items","selectContactIsLoading","isLoading","selectContactError","error","selectVisibleContacts","createSelector","filter","contact","toLowerCase","includes","schema","object","string","min","max","required","number","ContactForm","dispatch","useDispatch","useSelector","Formik","initialValues","onSubmit","values","resetForm","find","_ref2","alert","concat","addContact","console","log","validationSchema","_jsxs","FormEl","autoComplete","htmlFor","FieldEl","type","id","placeholder","label","variant","FormError","Button","List","styled","ContactList","visibleContacts","map","onClick","contactId","deleteContact","FilterWrap","Filter","_useState","useState","_useState2","_slicedToArray","setFilter","TextField","value","onChange","e","input","target","filterContacts","LoaderWrap","LoadMessage","_templateObject2","Loader","Hourglass","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","TitleCont","TitleContacts","title","Title","TitlePhonebook","useEffect","fetchContacts","_Fragment","Container","Section","ErrMessage","Form","Field"],"sourceRoot":""}